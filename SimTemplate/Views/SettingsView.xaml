<ContentControl x:Class="SimTemplate.Views.SettingsView"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
        xmlns:local="clr-namespace:SimTemplate.Views"
        xmlns:conv="clr-namespace:SimTemplate.Views.Converters"
        mc:Ignorable="d" >
    <ContentControl.Resources>
        <!--Styles-->
        <Style x:Key="settingTitleStyle" BasedOn="{StaticResource baseStyle}">
            <Setter Property="TextElement.FontWeight" Value="Bold" />
        </Style>
        <!--Converters-->
        <conv:BooleanToOppositeBooleanConverter x:Key="BooleanToOppositeBooleanConverter"/>
    </ContentControl.Resources>
    <StackPanel Margin="20,20"
                Orientation="Vertical"
                VerticalAlignment="Center"
                TextBlock.TextAlignment="Center">
        <StackPanel.Resources>
            <!--Style to power validation-->
            <Style TargetType="{x:Type TextBox}">
                <Style.Triggers>
                    <!-- Trigger to set the ToolTip to inform about the error -->
                    <Trigger Property="Validation.HasError" Value="True">
                        <Setter Property="ToolTip"
                                Value="{Binding
                            RelativeSource={x:Static RelativeSource.Self},
                            Path=(Validation.Errors)[0].ErrorContent}"/>
                    </Trigger>
                </Style.Triggers>
                <!--Provide enough space for the validation error text-->
                <Setter Property="Margin" Value="0,20,0,0"/>
                <!--Show error text above the setting-->
                <Setter Property="Validation.ErrorTemplate">
                    <Setter.Value>
                        <ControlTemplate>
                            <StackPanel Orientation="Vertical">
                                <TextBlock Margin="3"
                                           Foreground="Red"
                                           Text="{Binding
                                    Path=AdornedElement.ToolTip,
                                    RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Adorner}}}" />
                                <AdornedElementPlaceholder>
                                    <Border BorderBrush="Red" BorderThickness="2"/>
                                </AdornedElementPlaceholder>
                            </StackPanel>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </StackPanel.Resources>
        <!--Content-->
        <TextBlock TextWrapping="Wrap"
                   FontWeight="Bold"
                   FontSize="14">
            WARNING: Changing these settings will cause any unsaved work to be lost.
        </TextBlock>
        
        <!--SETTINGS-->
        <TextBlock Style="{StaticResource settingTitleStyle}">
            API Key:
        </TextBlock>
        <TextBox x:Name="apiKeyTextInput"
                 Text="{Binding Path=ApiKey, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}"/>
        
        <!--DIALOG BUTTONS-->
        <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
            <!--Update button-->
            <Button Width="60"
                    Margin="5"
                    Command="{Binding Path=UpdateSettingsCommand}"
                    IsEnabled="{Binding ElementName=apiKeyTextInput,
                Path=(Validation.HasError),
                Converter={StaticResource BooleanToOppositeBooleanConverter}}">
                <!--Disable Update button if invalid data-->
                <!--<Button.Triggers>
                <DataTrigger Binding="{Binding ElementName=apiKeyTextInput, Path=(Validation.HasError)}" Value="True">
                    <Setter Property="IsEnabled" Value="False"/>
                </DataTrigger>
            </Button.Triggers>-->
                Update
            </Button>
            <!--Cancel button-->
            <Button Width="60"
                    Margin="5"
                    Command="{Binding Path=CancelCommand}"
                    IsCancel="True">
                Cancel
            </Button>
        </StackPanel>
    </StackPanel>
</ContentControl>
